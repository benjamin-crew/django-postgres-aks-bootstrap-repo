name: Build Docker Container & Push to ACR

# Only manually trigger
on:
  workflow_dispatch:

env:
  CONTAINER_REGISTRY: bctstexampleacr01.azurecr.io
  NAMESPACE: bc-tst-example_project
  PROJECT_NAME: example_project
  AKS_CLUSTER: bc-tst-example-aks01
  RESOURCE_GROUP: bc-tst-example-rg01
  DEPLOYMENT_NAME: example_project-deployment
  SECRET_NAME: example_project-prod-env


jobs:
  test_django_job:
    uses: ./.github/workflows/test-django.yaml
  build:
    runs-on: ubuntu-latest
    needs: [test_django_job]
    steps:
      # Checkout the repo
      - name: "Checkout GitHub Action"
        uses: actions/checkout@main

      # Login to Azure CLI
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Build and push container image
      - name: Build & push container image
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ env.CONTAINER_REGISTRY }}/${{ env.PROJECT_NAME }}:latest \
          -t ${{ env.CONTAINER_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ github.sha }}

          docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.PROJECT_NAME }} --all-tags
        working-directory: ./web

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: ${{ env.AKS_CLUSTER }}
          resource-group: ${{ env.RESOURCE_GROUP }}

      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

      # Pipe deployment secrets to .env
      - name: Update deployment secrets
        run: |
          cat << EOF >> web/.env
          DEBUG=0
          DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
          DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
          DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          EOF
          kubectl delete secret ${{ env.SECRET_NAME }} --namespace="${{ env.NAMESPACE }}" || true
          kubectl create secret generic ${{ env.SECRET_NAME }} --from-env-file=web/.env --namespace="${{ env.NAMESPACE }}"

      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY }}
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: k8s-secrets
          secret_type: generic
          data: ${{ secrets.K8S_SECRETS }}
      
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            ${{ github.workspace }}/k8s/manifests/deployment.yaml
          images: |
            ${{ env.CONTAINER_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            k8s-secrets
          namespace: ${{ env.NAMESPACE }}

      # Run the migrate commands
      - name: Migrate Database
        run: |
          kubectl config current-context
          kubectl config set-context --current --namespace=${{ env.NAMESPACE }}
          kubectl config current-context
          export SINGLE_POD_NAME=$(kubectl get pod -l app=${{ env.DEPLOYMENT_NAME }} -o jsonpath="{.items[0].metadata.name}")
          echo $SINGLE_POD_NAME
          kubectl exec -i $SINGLE_POD_NAME -- bash /app/migrate.sh
